basePath: /
definitions:
  dto.CreateProductInput:
    properties:
      name:
        type: string
      price:
        type: number
    type: object
  dto.CreateUserInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  dto.GetJWTInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.GetJWTOutput:
    properties:
      accessToken:
        type: string
    type: object
  entity.Product:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  handlers.Error:
    properties:
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: contato@lucioschenkel.com
    name: Lucio Schenkel
    url: https://lucioschenkel.com
  description: Product API with authentication.
  license:
    name: Lucio Schenkel License
    url: https://lucioschenkel.com/license
  termsOfService: http://swagger.io/terms/
  title: GoExpert API
  version: "1.0"
paths:
  /products:
    get:
      consumes:
      - application/json
      description: List products
      parameters:
      - description: page number
        in: query
        name: page
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Product'
            type: array
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: List products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a product
      parameters:
      - description: product request
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Create a product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Product a product
      parameters:
      - description: product request
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductInput'
      - description: product id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Product a product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product
      parameters:
      - description: product id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get a product
      parameters:
      - description: product id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
        "404":
          description: Not Found
      security:
      - ApiKeyAuth: []
      summary: Get a product
      tags:
      - products
  /users:
    post:
      consumes:
      - application/json
      description: Create a user
      parameters:
      - description: user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Error'
      summary: Create a user
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Get a user JWT
      parameters:
      - description: user credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GetJWTInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetJWTOutput'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      summary: Get a user JWT
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
